plugins {
    id 'application'
    id 'java'
    id 'org.beryx.jlink' version '3.1.1'
}

group = 'org.breachinthecontainment'
version = '1.0.0'

application {
    mainClass = 'org.breachinthecontainment.launcher_client.Main'
    mainModule = 'com.breachinthecontainment.launcher'
}

repositories {
    mavenCentral()
    maven {
        url 'https://litarvan.github.io/maven'
    }
}

dependencies {
    implementation 'fr.litarvan:openauth:1.1.6'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'org.openjfx:javafx-base:21'
    implementation 'org.openjfx:javafx-controls:21'
    implementation 'org.openjfx:javafx-graphics:21'
    implementation 'org.openjfx:javafx-fxml:21'
    implementation 'org.openjfx:javafx-web:21'
    implementation 'org.openjfx:javafx-swing:21'
}

java {
    modularity.inferModulePath = true
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jlink {
    options = ['--strip-debug', '--compress=2', '--no-header-files', '--no-man-pages']
    addExtraDependencies('javafx.base', 'javafx.controls', 'javafx.graphics', 'javafx.fxml', 'javafx.web', 'javafx.swing')
    forceMerge('openauth')
    imageName = 'EspressoLauncher'

    launcher {
        name = 'EspressoLauncher'
    }

    jpackage {
        appVersion = '1.0.0'
        vendor = 'BreachInTheContainment'
        installerType = project.hasProperty('installerType') ? project.property('installerType') : detectInstallerType()
        imageName = 'EspressoLauncher'
        installerName = 'EspressoInstaller'
        // Platform-specific jpackage options
        jpackageOptions = detectJpackageOptions()
    }
}

// Helper function to detect installer type based on OS
def detectInstallerType() {
    def os = System.getProperty('os.name').toLowerCase()
    if (os.contains('win')) {
        return 'exe'
    } else if (os.contains('mac')) {
        return 'dmg'
    } else {
        return 'deb'
    }
}

// Helper function to set platform-specific jpackage options
def detectJpackageOptions() {
    def os = System.getProperty('os.name').toLowerCase()
    def options = []
    if (os.contains('win')) {
        options += ['--win-console', '--icon', file('icons/icon.ico').absolutePath]
    } else if (os.contains('mac')) {
        options += ['--mac-package-identifier', 'org.breachinthecontainment.launcher', '--icon', file('icons/icon.icns').absolutePath]
    } else {
        options += ['--icon', file('icons/icon.png').absolutePath]
    }
    return options
}

// Ensure module path includes JavaFX modules for compilation
tasks.withType(JavaCompile) {
    options.compilerArgs += ['--module-path', classpath.asPath]
}